name: CI (no-docker-compose)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (black)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install black
        run: |
          python -m pip install --upgrade pip
          pip install black

      - name: Run black
        run: |
          black --check src

  test:
    name: Tests (uses GitHub Actions Postgres service, no docker compose)
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d test_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install system deps (pg_isready)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client libpq-dev build-essential

      - name: Wait for Postgres to be ready
        # robust wait loop using pg_isready on localhost:5432
        env:
          PGPASSWORD: postgres
        run: |
          echo "Waiting for Postgres to accept connections..."
          attempts=0
          until pg_isready -h localhost -p 5432 -U postgres -d test_db >/dev/null 2>&1; do
            attempts=$((attempts+1))
            echo "Postgres not ready yet (attempt: $attempts)..."
            if [ "$attempts" -ge 60 ]; then
              echo "ERROR: Postgres did not become ready after $attempts attempts."
              docker ps -a || true
              exit 1
            fi
            sleep 2
          done
          echo "Postgres is ready."

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        env:
          # tests should use this DATABASE_URL (pointing to the Actions Postgres service)
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          # add other secrets if tests require them:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          set -o pipefail
          pytest -v --maxfail=1 | tee pytest.log
          test_exit=${PIPESTATUS[0]}
          if [ $test_exit -ne 0 ]; then
            echo "=== Pytest failed; printing last 200 lines of pytest.log ==="
            tail -n 200 pytest.log || true
            exit $test_exit
          fi
          echo "Tests passed."

  build-and-push:
    name: Build & (optional) Push Docker image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (optional multi-arch)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
